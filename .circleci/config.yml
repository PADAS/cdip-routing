version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.13.0

commands:
  configure_git_for_commit_and_push:
    steps:
      - run: 'git config user.email "circleci@vulcan.com"'
      - run: 'git config user.name "circleci"'
      - run: 'git config push.default current'
      - add_ssh_keys:
          fingerprints:
            - '4d:c3:5b:e3:96:ff:a4:fb:7e:02:ce:ef:fe:fc:11:6d'
  activate_google_service_account:
    steps:
      - run: 'gcloud auth activate-service-account --key-file=<(echo "$ENCODED_GCR_KEY" | base64 --decode)'
  docker_login:
    steps:
      - run: 'echo "$ENCODED_GCR_KEY" | base64 --decode | docker login --username _json_key --password-stdin https://gcr.io'

  trigger_downstream_builds:
    parameters:
      target_project_slug:
        type: string
        default: "unknown"
    steps:
      - run: 'ci-helpers/trigger-downstream.sh << parameters.target_project_slug >> ${CIRCLE_BRANCH}'

executors:
  gcloud:
    docker:
      - image: 'google/cloud-sdk:269.0.0'
        auth:
          username: sintegrate
          password: $DOCKERHUB_PASSWORD

jobs:
  build_cdip_routing_image:
    executor: 'gcloud'
    steps:
      - 'setup_remote_docker'
      - 'docker_login'
      - 'checkout'
      - run:
          name: "Build and Push Image"
          command: 'make build_and_push descriptive_gcr_path_stem="$CIRCLE_BRANCH" unique_gcr_tag="$CIRCLE_WORKFLOW_ID"'
  check_code:
    docker:
      - image: us.gcr.io/cdip-prod1-78ca/sintegrate-py-toolkit:1.1.0
        auth:
            username: _json_key  # Default username when using a JSON key file to authenticate
            password: $GCR_KEY_CT # This key must be in json format
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      # - run:
      #     name: Lint the code
      #     command: ./.circleci/check_standards.sh
      # - run:
      #     name: Code Analysis
      #     command: ./.circleci/check_complexity.sh

  build:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Setup build parameters
          command: |
            echo 'export GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID_CT' >> $BASH_ENV && source $BASH_ENV
            echo 'export GOOGLE_COMPUTE_ZONE=$GOOGLE_COMPUTE_ZONE_CT' >> $BASH_ENV && source $BASH_ENV
            echo 'export IMAGE_NAME=$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV && source $BASH_ENV
            if [[ -z "$CIRCLE_TAG" ]]; then
              echo "No tag is defined stg an image with latest tag will be built"
              echo 'export TAG=latest' >> $BASH_ENV && source $BASH_ENV
            else
              echo "$CIRCLE_TAG defined an image with sematic version will be built"
              echo 'export TAG=$(cat VERSION)' >> $BASH_ENV && source $BASH_ENV
            fi
      - gcp-gcr/build-image:
          image: $IMAGE_NAME
          tag: $TAG
          path: docker
          no_output_timeout: 10m
          registry-url: us.gcr.io
          google-project-id: GOOGLE_PROJECT_ID
      - run:
          name: Save image
          command: |
            docker save -o "$IMAGE_NAME-$TAG.tar" "us.gcr.io/${GOOGLE_PROJECT_ID}/$IMAGE_NAME:$TAG"
      - persist_to_workspace:
          root: .
          paths:
            - "*.tar"
            - "VERSION"
  push:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Import image and setup parameters
          command: |
            echo 'export GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID_CT' >> $BASH_ENV && source $BASH_ENV
            echo 'export GOOGLE_COMPUTE_ZONE=$GOOGLE_COMPUTE_ZONE_CT' >> $BASH_ENV && source $BASH_ENV
            echo ${GCP_PROJECT_KEY_CT} | base64 --decode --ignore-garbage > $HOME/gcloud-service-key.json
            echo 'export GOOGLE_CLOUD_KEYS=$(cat $HOME/gcloud-service-key.json)' >> $BASH_ENV
            echo 'export IMAGE_NAME=$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV && source $BASH_ENV
            if [[ -z "$CIRCLE_TAG" ]]; then
              echo "No tag is defined latest image will be imported"
              echo 'export TAG=latest' >> $BASH_ENV && source $BASH_ENV
            else
              echo 'export TAG=$(cat VERSION)' >> $BASH_ENV && source $BASH_ENV
            fi
            docker load -i "$IMAGE_NAME-$TAG.tar"
      - gcp-gcr/gcr-auth:
          gcloud-service-key: GOOGLE_CLOUD_KEYS
          google-project-id: GOOGLE_PROJECT_ID
          google-compute-zone: GOOGLE_COMPUTE_ZONE
      - gcp-gcr/push-image:
          image: $IMAGE_NAME
          tag: $TAG
          registry-url: us.gcr.io

workflows:
  pull_request_workflow:
    jobs:
      - check_code
      - build_cdip_routing_image:
          requires:
          - check_code
      - build:
          requires:
          - check_code
      - push:
          requires:
          - build
          filters:
            branches:
              only: main
  release_workflow:
    jobs:
      - build:
          filters:
            tags:
              only: /\d+\.\d+\.\d+(-alpha\.\d+)?$/
            branches:
              ignore: /.*/
      - push:
          requires:
            - build
          filters:
            tags:
              only: /\d+\.\d+\.\d+(-alpha\.\d+)?$/
            branches:
              ignore: /.*/
